# -*- coding: utf-8 -*-
"""Notebook_Predict_Stock_Price_with_Support_Vector_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HVqzuKMKT01m20Tb3ioPsEtVFOkGhllr

# Learning Data Science — Predict Stock Price with Support Vector Regression (SVR)

### Importación de librerias y dependencias
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from sklearn.svm import SVR 
import matplotlib.pyplot as plt 
import pandas as pd 

# %matplotlib inline

"""### Preparación de la data"""

#Usaremos la información de Toronto-Dominion Bank (TD.TO), correspondiente a la fecha del 01-01-2019 al 30-01-2019
df = pd.read_csv('./TD.TO.csv')
#Ordenamos los encabezados para que se muestre igual al ejemplo y mostramos las primeras 5 filas
df.loc[:, ["Open","Volume","High","Low","Close","Date","Adj Close"]].head()

# Obtenemos toda la data con la siguiente función: get_data()
def get_data(df):  
    data = df.copy()
    data['Date'] = data['Date'].str.split('-').str[2]
    data['Date'] = pd.to_numeric(data['Date'])
    return [ data['Date'].tolist(), data['Close'].tolist() ] # Convierte series a listas (tolist)
dates, prices = get_data(df)

"""### Predicción de valores"""

# Función para predecir
def predict_prices(dates, prices, x):
    dates = np.reshape(dates,(len(dates), 1)) # Convierte a dimensión 1 x n 
    x = np.reshape(x,(len(x), 1))
    
    svr_lin  = SVR(kernel='linear', C=1e3)
    svr_poly = SVR(kernel='poly', C=1e3, degree=2)
    svr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.1)
    
# Ajustar modelo de regresión
    svr_lin .fit(dates, prices)
    svr_poly.fit(dates, prices)
    svr_rbf.fit(dates, prices)
    
# Función para graficar 
    
    plt.scatter(dates, prices, c='k', label='Data')
    plt.plot(dates, svr_lin.predict(dates), c='g', label='Linear model')
    plt.plot(dates, svr_rbf.predict(dates), c='r', label='RBF model')    
    plt.plot(dates, svr_poly.predict(dates), c='b', label='Polynomial model')
    
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.title('Support Vector Regression')
    plt.legend()
    plt.show()
    
    return svr_rbf.predict(x)[0], svr_lin.predict(x)[0], svr_poly.predict(x)[0]

"""### Gráfico para mostrar predicciones"""

predicted_price = predict_prices(dates, prices, [31])
# (73.18055746816138, 74.23818331643184, 75.30920098568245)

